This directory keeps the python scripts that may be used in association with
Selalib. Scripts for preprocessing, postprocessing or drivers may be included 
here.

We recommend to list here the name of the script and at least to briefly
state the purpose or the module with which the script is associated.

-----------------------

nurbs_patch_txt_to_nml.py:

used to convert a text file (generated by Ahmed Ratnani's PIGAUS/CAID codes)
which specifies a 2D geometric region (patch) into a namelist format readable 
by the the coordinate transformation's module read_from_file() method.

-----------------------
 
translate_multipatch_info.py:

translates a file (generated by Ahmed Ratnani's PIGASUS/CAID codes) which 
contains the connectivity information between multiple patches and renders it
into a .nml format which can be used to initialize Selalib's multipatch object.

-----------------------

translate_connectivity_info.py:

translates a collection of files (generated by Ahmed Ratnani's PIGASUS/CAID 
codes) which contain information about the element connectivity (for finite-
element calculations) of coordinate transformations based on NURBS. Multiple 
files are processed, all identified by the same name even among different 
transformations: ID.txt, IEN_0.txt, IEN_1.txt, ..., IEN_n.txt, LM_0.txt, 
LM_1.txt, ..., LM_n.txt where 'n' is the number of patches that represents 
the coordinate transformation. The script only needs to be given the ID.txt 
file. Based on the location of this file, the script will find the name of the 
associated transformation, the number of patches and the IEN and LM files which
need to be processed. All the .nml outputs generated are placed in the same 
directory where the original ID.txt file is located.

-----------------------
finite_difference_stencil.py:

this script can be used to find forward, backward or centered finite 
difference schemes for function values or derivatives of a discrete function.
It produces the coefficients needed for the desired quantity. For example, if
the user wants a centered difference scheme for the second derivative of a
function using the points [-1 0 1] accurate to second order, the result would
be the known [1 -2 1] stencil.


