IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: Debug Release.")
ELSE()
   SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: Debug Release.")
ENDIF()

PROJECT(PIC2D)
ENABLE_LANGUAGE(Fortran)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

MESSAGE( STATUS "PIC2D_BINARY_DIR: ${PIC2D_BINARY_DIR}" )
MESSAGE( STATUS "PIC2D_SOURCE_DIR: ${PIC2D_SOURCE_DIR}" )
IF (CMAKE_PROJECT_NAME MATCHES "PIC2D")
   SET(SLL_SOURCE_DIR "${PIC2D_SOURCE_DIR}/../../prototype/src")
ENDIF()
MESSAGE( STATUS "SLL_SOURCE_DIR: ${SLL_SOURCE_DIR}" )

SET (CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake 
                       ${SLL_SOURCE_DIR}/CMakeModules
                       ${CMAKE_MODULE_PATH} )

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_Fortran_MODULE_DIRECTORY "${CMAKE_BINARY_DIR}/modules")


MESSAGE(STATUS "PIC2D:CMAKE_Fortran_COMPILER:${CMAKE_Fortran_COMPILER}")
INCLUDE(F90FLAGS)
MESSAGE(STATUS "PIC2D:CMAKE_Fortran_FLAGS:${CMAKE_Fortran_FLAGS}")

IF(NOT LAPACK_FOUND)
   FIND_PACKAGE(LAPACK)
ENDIF(NOT LAPACK_FOUND)
IF(NOT LAPACK_FOUND)
   INCLUDE(${SLL_SOURCE_DIR}/CMakeModules/LapackConfig.cmake)
ENDIF(NOT LAPACK_FOUND)

SET(SILO_ENABLED    OFF CACHE BOOL "Use SILO Library from LLNL ")
SET(FFTW_ENABLED    OFF CACHE BOOL "Use fftw library       " )

IF(SILO_ENABLED) 
   FIND_PACKAGE(SILO  REQUIRED)
   IF(SILO_FOUND)
      ADD_DEFINITIONS(-D_SILO)
      INCLUDE_DIRECTORIES(${SILO_INCLUDE_DIRS})
      SET(CMAKE_EXE_LINKER_FLAGS "-lsupc++")
      MESSAGE(STATUS "SILO_LIBRARIES:${SILO_LIBRARIES}")
   ENDIF()
ENDIF()

SET(FFT_LIB "FFTPACK")
SET(FFTPACK_LIBRARIES "dfftpack")
ADD_DEFINITIONS(-DFFTPACK)

IF(FFTW_ENABLED AND NOT FFTW_FOUND)
   FIND_PACKAGE(FFTW)
   IF(FFTW_FOUND)
      ADD_DEFINITIONS(-DFFTW)
      INCLUDE_DIRECTORIES(${FFTW_INCLUDE_DIRS})
   ENDIF()
   MESSAGE(STATUS "FFTW_LIBRARIES:${FFTW_LIBRARIES}")
ENDIF()

FIND_PACKAGE(MPI)
IF(NOT MPI_FOUND)
   INCLUDE(MPIConfig)
ENDIF(NOT MPI_FOUND)

SET(HDF5_PARALLEL_ENABLED ON CACHE BOOL "Enable HDF5 parallel")

INCLUDE(HDF5Config)
IF(HDF5_IS_PARALLEL) 
   MESSAGE(STATUS "HDF5 parallel supported")
ELSE()
   MESSAGE(SEND_ERROR "HDF5 parallel not supported")
   MESSAGE(SEND_ERROR "./configure --enable-fortran --enable-parallel CC=mpicc FC=mpif90")
ENDIF()
SET(CMAKE_Fortran_COMPILER h5pfc)

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/include)
IF (CMAKE_PROJECT_NAME MATCHES "PIC2D")
   SET(SLL_BUILD_PACKAGE ON)
   ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/../../prototype/src/package 
                    ${CMAKE_BINARY_DIR}/package)
ENDIF()


SET(PIC2D_SRC zone.F90 
              initialisation.F90 
              kiss.F90 
              quietstart.F90 
              particules.F90
	        poisson.F90 
              villasenor.F90 
              maxwell.F90 
              diagno.F90 )

ADD_LIBRARY(pic2d STATIC ${PIC2D_SRC})

TARGET_LINK_LIBRARIES(pic2d selalib)

SET(LIBS selalib ${SILO_LIBRARIES} ${FFTW_LIBRARIES} ${HDF5_LIBRARIES})

ADD_EXECUTABLE(test_pic2d main.F90)
TARGET_LINK_LIBRARIES(test_pic2d pic2d ${LIBS})

ENABLE_TESTING()

SET(ARGS "${CMAKE_CURRENT_SOURCE_DIR}/../input/data.nml")
ADD_TEST(NAME test_pic2d COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_pic2d ${ARGS})
SET_TESTS_PROPERTIES(test_pic2d PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")
