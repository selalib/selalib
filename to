31a32
> #include "sll_file_io.h"
36c37
< 
---
> use sll_utilities
38a40
> 
67d68
<   sll_int32 :: num_dt
69d69
<   sll_int32 :: istep
88,94d87
<   sll_real64 :: err0
<   sll_real64 :: err1
<   sll_real64 :: err2
<   sll_real64 :: dt_max0
<   sll_real64 :: dt_max2
<   sll_int32 :: num_dt1
<   sll_int32 :: verbose
96d88
<    
108d99
<     num_dt, &
113,114c104
<     A2, &
<     verbose
---
>     A2
121,122c111
<   nb_step = 10
<   num_dt = 1  
---
>   nb_step = 10  
124,129d112
<   x1_min = 0._f64
<   x1_max = 1._f64
<   x2_min = 0._f64
<   x2_max = 1._f64
<   verbose = 0
<   
139,141c122
<     if(verbose==1)then
<       print*,'#read namelist'
<     endif
---
>     print*,'#read namelist'
150,167c131
<     if(verbose==1)then
<       print *,'#use default parameters'
<     endif    
<   endif
<   if(verbose==1)then
<     print *,'#k_mode=',k_mode
<     print *,'#Nc_x1=',Nc_x1
<     print *,'#Nc_x2=',Nc_x2
<     print *,'#x1_min x1_max=',x1_min,x1_max
<     print *,'#x2_min x2_max=',x2_min,x2_max
<     print *,'#nb_step=',nb_step
<     print *,'#dt=',dt
<     print *,'#num_dt=',num_dt
<     print *,'#d=',d
<     print *,'#A1_0',A1_0
<     print *,'#A2_0',A2_0
<     print *,'#A1=',A1
<     print *,'#A2=',A2
---
>     print *,'#use default parameters'  
168a133,145
>   print *,'#k_mode=',k_mode
>   print *,'#Nc_x1=',Nc_x1
>   print *,'#Nc_x2=',Nc_x2
>   print *,'#x1_min x1_max=',x1_min,x1_max
>   print *,'#x2_min x2_max=',x2_min,x2_max
>   print *,'#nb_step=',nb_step
>   print *,'#dt=',dt
>   print *,'#d=',d
>   print *,'#A1_0',A1_0
>   print *,'#A2_0',A2_0
>   print *,'#A1=',A1
>   print *,'#A2=',A2
>   
201,208d177
< !  adv_x2 => new_periodic_1d_advector( &
< !    Nc_x2, &
< !    x2_min, &
< !    x2_max, &
< !!    LAGRANGE, & 
< !    SPLINE, & 
< !    4) 
< 
213,217c182,184
<     LAGRANGE, & 
<     d+1)
< !    SPLINE, & 
< !    4) 
< 
---
> !    LAGRANGE, & 
>     SPLINE, & 
>     4) 
219,233d185
<   if(verbose==1)then
<     print *,'#error fexact-finit=',maxval(f_exact-f_init)
<   endif  
< err0 = 0._f64
< dt_max0 = dt
< if(num_dt>1)then
<   num_dt1=num_dt+1
< else
<   num_dt1 = num_dt  
< endif 
< do istep = 1,num_dt1  
<   dt_loc = real(istep,f64)/real(num_dt,f64)*dt
<   if(istep==num_dt+1)then
<     dt_loc = dt_max2
<   endif
240,241c192,193
<       x1 = x1 - A1*real(nb_step,f64)*dt_loc
<       x2 = x2 - A2*real(nb_step,f64)*dt_loc
---
>       x1 = x1 - A1*real(nb_step,f64)*dt
>       x2 = x2 - A2*real(nb_step,f64)*dt
245,246c197
< 
< 
---
>   
254c205
<       call adv_x1%advect_1d_constant(A1, dt_loc, f(1:Nc_x1+1,i2), f(1:Nc_x1+1,i2))
---
>       call adv_x1%advect_1d_constant(A1, dt, f(1:Nc_x1+1,i2), f(1:Nc_x1+1,i2))
258c209
<       call adv_x2%advect_1d_constant(A2, dt_loc, f(i1,1:Nc_x2+1), f(i1,1:Nc_x2+1))
---
>       call adv_x2%advect_1d_constant(A2, dt, f(i1,1:Nc_x2+1), f(i1,1:Nc_x2+1))
261,269c212,214
<   err = maxval(abs(f-f_exact))
<   if(err>err0)then
<     dt_max0 = dt_loc
<     err0 = err 
<   endif  
< enddo
<   if(verbose==1)then  
<     print *,'#err for classical method=',err0
<   endif
---
>   err = maxval(abs(f-f_exact))  
>   print *,'#err for classical method=',err
> 
272c217
<       call plot_f_cartesian( &
---
>       call sll_plot_f_cartesian( &
280,300c225
< !      call plot_f_cartesian( &
< !        iplot, &
< !        f_visu_light, &
< !        sim%x1_array_light, &
< !        np_x1_light, &
< !        node_positions_x2_light, &
< !        sim%num_dof_x2_light, &
< !        'light_f', time_init )        
< #endif
< 
< 
< #ifndef NOHDF5
<       call plot_f_cartesian( &
<         0, &
<         f-f_exact, &
<         x1_array, &
<         Nc_x1+1, &
<         x2_array, &
<         Nc_x2+1, &
<         'errorf_classic', 0._f64 )        
< !      call plot_f_cartesian( &
---
> !      call sll_plot_f_cartesian( &
310d234
< 
313,342c237,265
< !!new method
< !  f = f_init  
< !  err = 0._f64  
< !  alpha = A2*dt/delta_x2
< !  i0 = floor(alpha)
< !  alpha = alpha-i0  
< !  print *,'#i0=',i0,alpha
< !    
< !  do step =1,nb_step
< !    do i2=1,Nc_x2+1
< !      !choose several dt_loc so that advection in x2 is exact
< !      do ell=r,s
< !        dt_loc = real(ell+i0,f64)*delta_x2/A2         
< !        i2_loc = modulo(i2-ell-i0-1,Nc_x2)+1
< !        call adv_x1%advect_1d_constant( &
< !          A1, &
< !          dt_loc, &
< !          f(1:Nc_x1+1,i2_loc), &
< !          buf(ell,1:Nc_x1+1))
< !      enddo
< !      ! interpolate between these values 
< !      do i1=1,Nc_x1+1
< !        f_new(i1,i2) = lagrange_interpolate(alpha, d, xx, buf(r:s,i1) )
< !      enddo
< !    enddo    
< !    f = f_new
< !  enddo
< !  err = maxval(abs(f-f_exact))
< !  err1=err
< !  print *,'#err with new method=',err
---
>   !new method
>   f = f_init  
>   err = 0._f64  
>   alpha = A2*dt/delta_x2
>   i0 = floor(alpha)
>   alpha = alpha-i0  
>   print *,'#i0=',i0,alpha
>     
>   do step =1,nb_step
>     do i2=1,Nc_x2+1
>       !choose several dt_loc so that advection in x2 is exact
>       do ell=r,s
>         dt_loc = real(ell+i0,f64)*delta_x2/A2         
>         i2_loc = modulo(i2-ell-i0-1,Nc_x2)+1
>         call adv_x1%advect_1d_constant( &
>           A1, &
>           dt_loc, &
>           f(1:Nc_x1+1,i2_loc), &
>           buf(ell,1:Nc_x1+1))
>       enddo
>       ! interpolate between these values 
>       do i1=1,Nc_x1+1
>         f_new(i1,i2) = lagrange_interpolate(alpha, d, xx, buf(r:s,i1) )
>       enddo
>     enddo    
>     f = f_new
>   enddo
>   err = maxval(abs(f-f_exact))
>   print *,'#err with new method=',err
344a268
>   f = f_init  
354d277
< 
356,377c279
< err2 = 0._f64
< dt_max2 = dt 
< do istep = 1,num_dt1  
<   f = f_init  
<   dt_loc = real(istep,f64)/real(num_dt,f64)*dt
<   if(istep==num_dt+1)then
<     dt_loc = dt_max2
<   endif
< 
<   do i2=1,Nc_x2+1
<     x2 = x2_min+real(i2-1,f64)*delta_x2
<     do i1=1,Nc_x1+1
<       x1 = x1_min+real(i1-1,f64)*delta_x1
<       x2 = x2_min+real(i2-1,f64)*delta_x2
<       f_init(i1,i2) = sin(2._f64*sll_pi*real(k_mode,f64)*(-A2_0*x1+A1_0*x2))
<       x1 = x1 - A1*real(nb_step,f64)*dt_loc
<       x2 = x2 - A2*real(nb_step,f64)*dt_loc
<       f_exact(i1,i2) = sin(2._f64*sll_pi*real(k_mode,f64)*(-A2_0*x1+A1_0*x2))
<     enddo
<   enddo
< 
< 
---
>   err = 0._f64  
383c285
<       dt_loc, &
---
>       dt, &
389,397c291,293
<   if(err>err2)then
<     dt_max2 = dt_loc
<     err2 = err
<   endif
< enddo
<   if(verbose==1)then  
<     print *,'#err with new method using oblic advector=',err2
<   endif
<   print *,Nc_x1,Nc_x2,d,dt,nb_step,k_mode,A1,A2,A1_0,A2_0,err0,err2,dt_max0,dt_max2
---
>   print *,'#err with new method using oblic advector=',err
>   
>   
400c296
<       call plot_f_cartesian( &
---
>       call sll_plot_f_cartesian( &
408,427c304
< !      call plot_f_cartesian( &
< !        iplot, &
< !        f_visu_light, &
< !        sim%x1_array_light, &
< !        np_x1_light, &
< !        node_positions_x2_light, &
< !        sim%num_dof_x2_light, &
< !        'light_f', time_init )        
< #endif
< 
< #ifndef NOHDF5
<       call plot_f_cartesian( &
<         0, &
<         f-f_exact, &
<         x1_array, &
<         Nc_x1+1, &
<         x2_array, &
<         Nc_x2+1, &
<         'errorf_new', 0._f64 )        
< !      call plot_f_cartesian( &
---
> !      call sll_plot_f_cartesian( &
436d312
< 
438,509d313
<   
<   
<   
< 
< 
< contains
< 
< #ifndef NOHDF5
< !*********************
< !*********************
< 
<   !---------------------------------------------------
<   ! Save the mesh structure
<   !---------------------------------------------------
<   subroutine plot_f_cartesian( &
<     iplot, &
<     f, &
<     node_positions_x1, &
<     nnodes_x1, &
<     node_positions_x2, &
<     nnodes_x2, &
<     array_name, time)    
<     !mesh_2d)
<     use sll_xdmf
<     use sll_hdf5_io_serial
<     sll_int32 :: file_id
<     sll_int32 :: error
<     sll_real64, dimension(:), intent(in) :: node_positions_x1
<     sll_real64, dimension(:), intent(in) :: node_positions_x2    
<      character(len=*), intent(in) :: array_name !< field name
<     sll_real64, dimension(:,:), allocatable :: x1
<     sll_real64, dimension(:,:), allocatable :: x2
<     sll_int32, intent(in) :: nnodes_x1
<     sll_int32, intent(in) :: nnodes_x2
<     sll_int32 :: i, j
<     sll_int32, intent(in) :: iplot
<     character(len=4)      :: cplot
<     sll_real64, dimension(:,:), intent(in) :: f
<     sll_real64 :: time
<     
<     if (iplot == 1) then
< 
<       SLL_ALLOCATE(x1(nnodes_x1,nnodes_x2), error)
<       SLL_ALLOCATE(x2(nnodes_x1,nnodes_x2), error)
<       do j = 1,nnodes_x2
<         do i = 1,nnodes_x1
<           x1(i,j) = node_positions_x1(i) !x1_min+real(i-1,f32)*dx1
<           x2(i,j) = node_positions_x2(j) !x2_min+real(j-1,f32)*dx2
<         end do
<       end do
<       call sll_hdf5_file_create("cartesian_mesh-x1.h5",file_id,error)
<       call sll_hdf5_write_array(file_id,x1,"/x1",error)
<       call sll_hdf5_file_close(file_id, error)
<       call sll_hdf5_file_create("cartesian_mesh-x2.h5",file_id,error)
<       call sll_hdf5_write_array(file_id,x2,"/x2",error)
<       call sll_hdf5_file_close(file_id, error)
<       deallocate(x1)
<       deallocate(x2)
< 
<     end if
< 
<     call int2string(iplot,cplot)
<     call sll_xdmf_open(trim(array_name)//cplot//".xmf","cartesian_mesh", &
<       nnodes_x1,nnodes_x2,file_id,error)
<     write(file_id,"(a,f8.3,a)") "<Time Value='",time,"'/>"
<     call sll_xdmf_write_array(trim(array_name)//cplot,f,"values", &
<       error,file_id,"Node")
<     call sll_xdmf_close(file_id,error)
<   end subroutine plot_f_cartesian
< 
< #endif
< 
