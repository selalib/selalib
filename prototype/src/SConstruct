import os
import os.path
import socket
import distutils.util

#Add your directory here
sll_dirs = Split(""" 	memory
			precision
			assert
			constants
			utilities
			splines
        		collective
			remap
			timer
			mesh_types
			ode_solvers
			diagnostics
			distribution_function
			poisson_solvers
""")


platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'hostname : ' + hostname
print 'platform : ' + platform


env = Environment( 
                        ENV = os.environ,
                        CC = 'mpicc',
                        F90 = 'mpif90',
                        F90FLAGS = ['-cpp','-g'],
                        F90PATH = ['../'+dirs for dirs in sll_dirs]+['.'],
                        CPPDEFINES = ['GFORTRAN', 'DEBUG', 'MPIF90', 'NOHDF5'],
                        LINK = ['mpif90'],
                        LIBPATH = ['.'],
                       )


if hostname[:7] == "hpc-f02":
   print 'hpc-f02'

if platform[:6] == "macosx":
   env.Append( F90FLAGS = ['-g', '-W', '-Wall', '-ffree-line-length-none'] )

if hostname[:8] == "irma-hpc":
   env.Append( F90FLAGS = ['-g', '-W', '-Wall', '-ffree-line-length-none'] )

Export('env')

sll = {}
for dir in sll_dirs:
   print '%s/SConscript' % dir
   lib = SConscript('%s/SConscript' % dir)
   print lib
   sll.update({dir:lib})

print sll['precision']

#Requires(sll['assert'], ['sll_working_precision.mod'])
Requires(sll['precision'], sll['memory'])
Requires(sll['collective'], sll['precision'])
#Requires(sll['constants'], sll['precision'])
Requires(sll['distribution_function'], sll['mesh_types'])
#Requires(sll['mesh_types'], sll['precision'])

env.Append(LIBS = sll.values())
