CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_BUILD_TYPE Release CACHE STRING " " FORCE)

PROJECT(selalib)
ENABLE_LANGUAGE(Fortran)

ADD_DEFINITIONS(-DGFORTRAN)
SET(CMAKE_Fortran_FLAGS_RELEASE "-w -ffree-line-length-none -fall-intrinsics -O3" CACHE STRING "opt flags" FORCE)

SET(CMAKE_Fortran_MODULE_DIRECTORY "${CMAKE_BINARY_DIR}/modules")

INCLUDE_DIRECTORIES(${CMAKE_Fortran_MODULE_DIRECTORY})

SET(HDF5_PARALLEL_ENABLED ON CACHE BOOL "Use Parallel HDF5" FORCE)
SET(FFTW_ENABLED          ON CACHE BOOL "Use fftw library " FORCE)
ADD_DEFINITIONS(-DFFTW)

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/include)
FIND_PACKAGE(MPI REQUIRED Fortran)

SET(TRIAL_PATHS /opt/local /usr /usr/local)

FIND_PATH(HDF5_INCLUDE_DIRS NAMES hdf5.mod
   HINTS ${TRIAL_PATHS}
   PATH_SUFFIXES include include/fortran
   DOC "PATH to hdf5.mod")

FIND_LIBRARY(HDF5_C_LIBRARY NAMES hdf5
   HINTS /${TRIAL_PATHS}
   PATH_SUFFIXES lib hdf5/lib
   DOC "PATH TO libhdf5")

FIND_LIBRARY(HDF5_FORTRAN_LIBRARY NAMES hdf5_fortran
   HINTS /${TRIAL_PATHS}
   PATH_SUFFIXES lib hdf5/lib
   DOC "PATH TO libhdf5_fortran")

FIND_LIBRARY(ZLIB_LIBRARIES NAMES z
   HINTS ${TRIAL_PATHS} 
	PATH_SUFFIXES lib hdf5/lib
	DOC "PATH TO libz")

SET(HDF5_LIBRARIES ${HDF5_FORTRAN_LIBRARY} ${HDF5_C_LIBRARY} ${ZLIB_LIBRARIES})

INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})

FIND_PATH(FFTW_INCLUDE_DIRS NAMES fftw3.f03 HINTS ${TRIAL_PATHS} PATH_SUFFIXES include DOC "path to fftw3.f03")

FIND_LIBRARY(FFTW_LIBRARY NAMES fftw3 HINTS ${TRIAL_PATHS} PATH_SUFFIXES lib lib64)

INCLUDE_DIRECTORIES(${FFTW_INCLUDE_DIRS})

SET(CMAKE_Fortran_COMPILER ${MPI_Fortran_COMPILER})

FILE(GLOB SLL_MACROS "include/*.h")
FILE(GLOB SLL_SOURCE_FILES "src/*.F90")
FILE(GLOB SLL_EXAMPLES "examples/*.F90")
FILE(GLOB SLL_CMAKE_FILES "cmake/*.cmake")

ADD_SUBDIRECTORY(fftpack)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
ADD_LIBRARY(selalib STATIC ${SLL_SOURCE_FILES})
TARGET_LINK_LIBRARIES(selalib ${FFTPACK_LIBRARIES} ${FFTW_LIBRARIES} ${HDF5_LIBRARIES})

ADD_SUBDIRECTORY(examples EXCLUDE_FROM_ALL)

FIND_PACKAGE(Doxygen)
if(DOXYGEN_FOUND)
   GET_FILENAME_COMPONENT(DOXYGEN_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH)
   SET(DOXYGEN_OUTPUT_DIR ${CMAKE_BINARY_DIR})
   CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
   ADD_CUSTOM_TARGET(doc 
   COMMAND ${DOXYGEN_EXECUTABLE} -u ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
   COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} 
   COMMENT "Generating API documentation with Doxygen" VERBATIM)
ELSE(DOXYGEN_FOUND)
   MESSAGE(STATUS "DOXYGEN NOT FOUND")
ENDIF(DOXYGEN_FOUND)

INSTALL(CODE "EXECUTE_PROCESS (COMMAND \"${CMAKE_COMMAND}\" -E copy_directory \"${CMAKE_Fortran_MODULE_DIRECTORY}\" \"${CMAKE_INSTALL_PREFIX}/include/selalib\")" CONFIGURATIONS Release)

INSTALL(FILES ${SLL_CMAKE_FILES} DESTINATION share/selalib/cmake COMPONENT headers)
INSTALL(FILES ${SLL_EXAMPLES} DESTINATION share/selalib/examples COMPONENT headers)
INSTALL(FILES ${SLL_MACROS} DESTINATION include/selalib COMPONENT headers)
INSTALL(TARGETS selalib ARCHIVE DESTINATION lib COMPONENT libraries)

ADD_CUSTOM_TARGET(uninstall 
COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_INSTALL_PREFIX}/lib/libselalib.a
COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_INSTALL_PREFIX}/lib/libdfftpack.a
COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_INSTALL_PREFIX}/share/selalib
COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_INSTALL_PREFIX}/include/selalib
WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
COMMENT "Uninstall selalib" VERBATIM)
