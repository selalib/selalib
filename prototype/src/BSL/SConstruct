# SCons file for the unit test of the cylindrical mesh type
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'hostname : ' + hostname
print 'platform : ' + platform


if os.environ.has_key("HDF5INCPATH"):
   print 'hdf5 header files are in %s ' %  os.environ['HDF5INCPATH']
else:
   print 'HDF5INCPATH not set'

if os.environ.has_key("HDF5MODPATH"):
   print 'hdf5 mod files are in %s ' %  os.environ['HDF5MODPATH']
else:
   print 'HDF5MODPATH not set'

if os.environ.has_key("HDF5LIBPATH"):
   print 'hdf5 library files are in %s ' %  os.environ['HDF5LIBPATH']
else:
   print 'HDF5LIBPATH not set'

vars = Variables()
vars.Add('HDF5INCPATH', 'hdf5 header files location',os.environ['HDF5INCPATH'])
vars.Add('HDF5MODPATH', 'fortran module hdf5.mod location',os.environ['HDF5MODPATH'])
vars.Add('HDF5LIBPATH', 'hdf5 library location',os.environ['HDF5LIBPATH'])

env = Environment( ENV = os.environ, 
                   variable = vars,
                   F90='mpif90',
                   F90FLAGS = ['-g', '-W', '-Wall', 
                               '-ffree-line-length-none',
                               '-fbounds-check'],
                   F90PATH = ['../memory',
                              '../precision',
                              '../assert',
                              '../utilities',
                              '../constants',
                              '../fields',
                              '../splines',
			      '../poisson_solvers'],
                   LIBPATH = ['.','../fftpack'],
                   LIBS = ['sll_memory',
                           'sll_precision',
                           'sll_assert',
                           'sll_constants',
                           'sll_splines',
                           'sll_distribution_function',
                           'sll_poisson_solvers',
                           'sll_field_2d',
                           'sll_utilities',
                           'sll_diagnostics',
                           'dfftpack'])

#HDF5 flags 
env.Append( LIBPATH = os.environ['HDF5LIBPATH'],
            F90PATH = os.environ['HDF5INCPATH'],
            LIBS = ['hdf5_fortran','hdf5','z'])

env.Append(CPPDEFINES=['DEBUG','GFORTRAN','_FFTPACK'])

env.Library('sll_memory',["../memory/sll_memory.F90"])
env.Library('sll_precision', ["../precision/sll_working_precision.F90"])
env.Library('sll_assert', ["../assert/sll_assert.F90"])
env.Library('sll_splines', ["../splines/sll_splines.F90"])
env.Library('sll_constants', ["../constants/numeric_constants.F90"])
env.Library('sll_utilities',["../utilities/misc_utils.F90"])
env.Library('sll_diagnostics',Glob("../diagnostics/sll_*.F90"))
env.Library('dfftpack', ['../fftpack/fftpack.f90', '../fftpack/dfftpack.f'])
env.Library('sll_field_2d',    ["../fields/sll_scalar_field_2d.F90",
                                "../fields/geometry_functions.F90"])
env.Library('sll_distribution_function', ["../distribution_function/sll_distribution_function.F90"])
env.Library('sll_poisson_solvers', ["../poisson_solvers/sll_poisson_2d_periodic.F90",
                                    "../poisson_solvers/sll_poisson_1d_periodic.F90",
                                    "../poisson_solvers/fft1d.f90",
                                    "../poisson_solvers/fft_module.F90"])

env.Program('unit_test', ["unit_test.F90", "sll_bsl.F90"])
env.Program('landau_4d', ["landau_4d.F90", "sll_bsl.F90"])
env.Program('landau_2d', ["landau_2d.F90", "sll_bsl.F90"])

Help(vars.GenerateHelpText(env))

print """
	To display results during execution, launch in BSL directory
        ./landau_2d | gnuplot 
        or 
        ./landau_4d | gnuplot
        It could take some time in 4D case 
"""
