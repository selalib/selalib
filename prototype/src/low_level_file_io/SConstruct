# SCons file for the unit test of the low_level_file_io
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'Run scons -h to display options'
print 'Building XDMF module...'
print 'Run  scons HDF5=0 to build without hdf5 library'
print 'hostname : ' + hostname
print 'platform : ' + platform

vars = Variables()
vars.Add('HDF5INCPATH', 'hdf5 header files location',os.environ['HDF5INCPATH'])
vars.Add('HDF5MODPATH', 'fortran module hdf5.mod location',os.environ['HDF5MODPATH'])
vars.Add('HDF5LIBPATH', 'hdf5 library location',os.environ['HDF5LIBPATH'])
vars.Add('HDF5', 'Set to 0 to build without HDF5 library', 1) 

SLLPATH = ['../memory','../assert','../precision','../constants']
SLLLIBS = ['sll_memory','sll_precision','sll_assertion']

env = Environment( variables  = vars,
                   ENV        = os.environ, 
                   F90FLAGS   = ['-cpp',
                                 '-pedantic','-std=f2003', 
                                 '-ffree-line-length-none'],
                   F90PATH    = SLLPATH+['${HDF5INCPATH}','${HDF5INCPATH}'],
                   LIBPATH    = ['.','${HDF5LIBPATH}'],
                   CPPDEFINES = ['GFORTRAN','DEBUG'],
                   LIBS       = SLLLIBS)

Help(vars.GenerateHelpText(env))

nohdf5 = ARGUMENTS.get('HDF5', 1)
if int(nohdf5):
   env.Append(LIBS = ['hdf5_fortran','hdf5','z'])
else:
   env.Append(CPPDEFINES = 'NOHDF5')

env.Library('sll_memory',  ["../memory/sll_memory.F90"])
env.Library('sll_precision',  ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',  ["../assert/sll_assert.F90"])
env.Program('unit_test', ["unit_test.F90"]+Glob("sll_*.F90"))
