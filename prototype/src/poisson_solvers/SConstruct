# SCons file to build the test case for the memory allocator
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname()

print 'hostname : ' + hostname
print 'platform : ' + platform

env = Environment( ENV = os.environ,
                   F90 = 'gfortran',
                   F90PATH= ['../memory','../precision','../assert', 
                             '../numerical_utilities','../constants',
                             '../mesh_types','../diagnostics','sll_utilities'],
# fix the following: fftpack should be treated as any other local library.
                   LIBPATH = ['.','../fftpack'],
                   LIBS = ['dfftpack','sll_memory','sll_precision',
                           'sll_assertion','sll_constants', 'sll_mesh_types',
                           'sll_diagnostics','sll_utilities'],
                   F90FLAGS = ['-g', '-W', '-Wall','-ffree-line-length-none',
                               '-fbounds-check'] )

src_files = ['sll_poisson_1D_periodic.F90', 'fft1d.f90', 'unit_test.F90',
             'sll_poisson_2D_periodic.F90', 'fft_module.F90']

env.Append(CPPDEFINES=['DEBUG','GFORTRAN','NOHDF5','_FFTPACK'])

env.Library('sll_memory',     ["../memory/sll_memory.F90"])
env.Library('sll_precision',  ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',  ["../assert/sll_assert.F90"])
env.Library('sll_constants',  ["../constants/numeric_constants.F90"])
env.Library('sll_mesh_types', ["../mesh_types/sll_mesh_types.F90",
                               "../mesh_types/geometry_functions.F90"])
env.Library('sll_diagnostics', Glob("../diagnostics/sll_*.F90"))
env.Library('sll_utilities',["../utilities/misc_utils.F90"])
env.Program(target='unit_test', source = src_files)
