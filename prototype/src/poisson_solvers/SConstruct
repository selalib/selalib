# SCons file to build the test case for the memory allocator
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname()

print 'hostname : ' + hostname
print 'platform : ' + platform

env = Environment( ENV = os.environ,
                   F90 = 'gfortran',
                   F90PATH= ['../memory','../precision','../assert', 
                             '../numerical_utilities','../constants',
                             '../mesh_types','../diagnostics','../utilities'],
# fix the following: fftpack should be treated as any other local library.
                   LIBPATH = ['.','../fftpack'],
                   LIBS = ['sll_memory','sll_precision','sll_mesh_types',
                           'sll_assertion','sll_constants', 
                           'sll_diagnostics','sll_utilities','dfftpack'],
                   LINKFLAGS=['-Wl,-rpath','-Wl,'+os.environ['HDF5LIBPATH']],
                   F90FLAGS = ['-g', '-W', '-Wall','-std=f2003',
                               '-ffree-line-length-none',
                               '-fbounds-check'] )

src_files = ['sll_poisson_1D_periodic.F90', 'fft1d.f90', 'unit_test.F90',
             'sll_poisson_2D_periodic.F90', 'fft_module.F90' ]

env.Append(CPPDEFINES=['DEBUG','GFORTRAN','_FFTPACK'])
env.Append(F90PATH=[os.environ['HDF5INCPATH']])
env.Append(LIBPATH=[os.environ['HDF5LIBPATH']])
env.Append(LIBS=['hdf5_fortran','hdf5','z'])

env.Library('sll_memory',     ["../memory/sll_memory.F90"])
env.Library('sll_precision',  ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',  ["../assert/sll_assert.F90"])
env.Library('sll_constants',  ["../constants/numeric_constants.F90"])
env.Library('sll_mesh_types', ["../mesh_types/sll_mesh_types.F90",
                               "../mesh_types/geometry_functions.F90"])
env.Library('sll_diagnostics', Glob("../diagnostics/sll_*.F90"))
env.Library('sll_utilities',["../utilities/misc_utils.F90"])
env.Library('dfftpack', ['../fftpack/fftpack.f90', '../fftpack/dfftpack.f'])

env.Program(target='unit_test', source = src_files)

env.Append(LIBS=['fftw3'])
env.Program('fftw_solver.F90')

env.Append(LIBS=['fftw3_threads'])
env.Program('poisson3d_with_fftw3.F90')

