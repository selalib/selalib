# SCons file to build the test case for the poisson solvers directory
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname()
print 'Building Poisson solvers... '
print ' '
print 'hostname : ' + hostname
print 'platform : ' + platform

vars = Variables()
vars.Add('CPATH', 'dummy path','.')
vars.Add('LPATH', 'dummy path','.')

env = Environment( ENV = os.environ,
                   F90 = 'mpif90',
                   F90PATH= ['../memory', '../precision', '../assert', 
                             '../numerical_utilities', '../constants',
                             '../mesh_types', '../diagnostics', '../collective',
                             '../utilities', '../fft', '../remap','../timer',
                             '../fftpack'],
# fix the following: fftpack should be treated as any other local library.
                   LINK = 'mpif90',
                   LIBPATH = ['.'],
                   LIBS = ['sll_remap','sll_mesh_types', 
                           'sll_fft', 'sll_collective',
                           'sll_diagnostics','sll_assertion','sll_utilities',
                           'sll_tridiagonal',
                           'sll_constants','sll_precision','sll_memory',
                           'sll_timer','dfftpack'],
                   LINKFLAGS=['-Wl,-rpath','-Wl,'+os.environ['HDF5LIBPATH'],
                   '-fopenmp'],
                    F90FLAGS = ['-g', '-W', '-Wall', '-DMPIF90', '-DDEBUG', 
                   '-ffree-line-length-none', '-fbounds-check'])


env.Append(CPPDEFINES=['DEBUG','GFORTRAN','_FFTPACK','MPIF90'])
env.Append(F90PATH=[os.environ['HDF5INCPATH']])
env.Append(LIBPATH=[os.environ['HDF5LIBPATH']])
env.Append(LIBS=['hdf5_fortran','hdf5','z'])

env.Library('sll_timer',      ["../timer/sll_timer.F90"])
env.Library('sll_memory',     ["../memory/sll_memory.F90"])
env.Library('sll_precision',  ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',  ["../assert/sll_assert.F90"])
env.Library('sll_constants',  ["../constants/numeric_constants.F90"])
env.Library('sll_mesh_types', ["../mesh_types/sll_mesh_types.F90",
                               "../mesh_types/geometry_functions.F90"])
env.Library('sll_diagnostics', Glob("../diagnostics/sll_*.F90"))
env.Library('sll_collective', ["../collective/sll_collective.F90"])
env.Library('sll_utilities',["../utilities/misc_utils.F90"])
env.Library('sll_tridiagonal',["../numerical_utilities/tridiagonal.F90"])
env.Library('sll_fft', ["../fft/sll_fft.F90"])
env.Library('dfftpack', ['../fftpack/fftpack.f90', '../fftpack/dfftpack.f'])
env.Library('sll_remap', ["../remap/sll_remap.F90"])
env.Library('sll_collective', ["../collective/sll_collective.F90"])

#env.Append(LIBS=['sll_fft'])
       
env.Append(LIBS=['fftw3_threads'])

if os.environ.has_key('FFTWINCPATH') and os.environ.has_key('FFTWLIBPATH') :
  env.Append(F90PATH=[os.environ['FFTWINCPATH']])
  env.Append(LIBPATH=[os.environ['FFTWLIBPATH']])
  env.Append(LIBS=['fftw3'])

env.Program('unit_test', ["unit_test.F90","sll_quasi_neutral_solver.F90"])
#env.Program('unit_test_fd_seq',["sll_qns_2d_with_finite_diff_seq.F90"])
#env.Program('unit_test_fd_par',["sll_qns_2d_with_finite_diff_par.F90"])
