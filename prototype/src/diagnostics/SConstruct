# SCons file for the unit test of the diagnostics
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'Building HDF5 module...'
print 'hostname : ' + hostname
print 'platform : ' + platform

if not os.environ.has_key("HDF5INCPATH"):
   os.environ['HDF5INCPATH'] = "/usr/local/include"

if not os.environ.has_key("HDF5MODPATH"):
   os.environ['HDF5MODPATH'] = "/usr/local/include"

if not os.environ.has_key("HDF5LIBPATH"):
   os.environ['HDF5LIBPATH'] = "/usr/local/lib"

vars = Variables()
vars.Add('HDF5INCPATH', 'hdf5 header files location',os.environ['HDF5INCPATH'])
vars.Add('HDF5MODPATH', 'fortran module hdf5.mod location',os.environ['HDF5MODPATH'])
vars.Add('HDF5LIBPATH', 'hdf5 library location',os.environ['HDF5LIBPATH'])

SLLPATH = ['../memory','../assert','../precision']
SLLLIBS = ['sll_memory','sll_precision','sll_assertion']

env = Environment( variables  = vars,
                   ENV        = os.environ, 
                   F90FLAGS   = ['-cpp','-g','-W','-Wall','-Wextra', 
                                 '-pedantic','-std=f2003', 
                                 '-ffree-line-length-none'],
                   F90PATH    = SLLPATH+['${HDF5INCPATH}','${HDF5INCPATH}'],
                   LIBPATH    = ['.','${HDF5LIBPATH}'],
                   LIBS       = SLLLIBS+['hdf5_fortran','hdf5','z'])

Help(vars.GenerateHelpText(env))


env.Append(CPPDEFINES=['GFORTRAN', 'DEBUG'])

cppvars = []
for key, value in ARGLIST:
    if key == 'define':
       cppvars.append(value)
       env.Append(CPPDEFINES=cppvars)
       env.Replace(LIBS=SLLLIBS)


#env.PrependENVPath('PATH', env.subst('${COMPILERDIR}'))
#env.PrependENVPath('PATH', '/opt/local/bin')

#Check gcc and gfortran version
ff = os.popen('gfortran --version')
ll = ff.readline()
ff.close()
gcc_version =ll[18:21]
if float(gcc_version) < 4.5:
   print 'gfortran version number '+gcc_version+' less than 4.5'
   exit();

env.Library('sll_memory',  ["../memory/sll_memory.F90"])
env.Library('sll_precision',  ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',  ["../assert/sll_assert.F90"])
env.Program('unit_test', ["unit_test.F90"]+Glob("sll_*.F90"))
