# SCons file for the unit test of the FFT module
import os
import socket
import distutils.util

# detection of fftw library doesn't work actually
# so you can't use it!

if not os.path.exists("../fftpack/fftpack.mod"):
   os.system("cd ../fftpack ; make")
os.system("rm -f conf.h")
os.system("touch conf.h")

fichier = open("conf.h", "w")
fichier.write("! Generated automatically.  DO NOT EDIT!\n")

TOTO = ''
TOTOLIB = ''
if os.path.exists("../fftw/fftw3.mod"):
   TOTO = 'FFTW3'
   TOTOLIB = '../fftw/lib'
else:
   fichier.write("#define _NOFFTW\n")

TATA = ''
if os.path.exists("../fftpack/fftpack.mod"):
   TATA = 'fftpack'
else:
   fichier.write("#define _NOFFTPACK\n")

fichier.close()

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'hostname : ' + hostname
print 'platform : ' + platform

env = Environment( ENV = os.environ,
                   F90PATH = ['../memory','../precision','../assert',
                              '../utilities','../constants','../timer','../fftpack/','../fftw/'],
                   FORTRANMODDIRPREFIX= '-J', 
                   LIBPATH= ['.','../timer','../fftpack',TOTOLIB],
                   LIBS=['sll_memory','sll_precision','sll_assertion',
                         'sll_misc','sll_constants','sll_timer',TATA,TOTO],
                   F90FLAGS = ['-g', '-W','-Wall','-DTEST_TIME', 
                               '-DDEBUG','-DGFORTRAN',
                               '-ffree-line-length-none'])
#'-std=f2003',
# Reminder: the -DGFORTRAN flag is necessary to make the hash operator work.
# This is important especially when using SLL_ASSERT()
#env.Append(LIBS = ['nsl', 'socket'])

#env.Library('FFTW3',        ["../fftw/fftw.f03","../fftw/fftw-3.3/include/fftw3.f03"])
#env.Library('fftpack',      ["../fftpack/fftpack.f90","../fftpack/dfftpack.f"])
env.Library('sll_timer',     ["../timer/sll_timer.F90"])
env.Library('sll_memory',    ["../memory/sll_memory.F90"])
env.Library('sll_precision', ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion', ["../assert/sll_assert.F90"])
env.Library('sll_misc',      ["../utilities/misc_utils.F90"])
env.Library('sll_constants', ["../constants/numeric_constants.F90"])
env.Program('unit_test',     ["unit_test.F90","sll_fft.F90"])
#env.Program('unit_test_original',     ["unit_test_original.F90","sll_fft.F90"])


