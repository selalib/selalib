# SCons file for the unit test of the FFT module
import os
import socket
import distutils.util

os.system("rm -f conf.h")
os.system("touch conf.h")

fichier = open("conf.h", "w")
fichier.write("! Generated automatically.  DO NOT EDIT!\n")


if os.environ.has_key('FFTWINCPATH') and os.environ.has_key('FFTWLIBPATH') :
  FFTW_LIB_PATH = os.environ['FFTWINCPATH']
  FFTW_INC_PATH = os.environ['FFTWLIBPATH']
  FFTW = 'fftw3'
else :
  FFTW_LIB_PATH = ''
  FFTW_INC_PATH = ''
  FFTW = ''
  fichier.write("#define _NOFFTW\n")

FFTW = ''

#FFTW_LIB_PATH = ''
#FFTW_INC_PATH = ''
#FFTW = ''
#if os.path.exists("/opt/local/lib/libfftw3.a") and os.path.exists("/opt/local/include/fftw3.f03"):
#  FFTW_LIB_PATH = '/opt/local/lib'
#  FFTW_INC_PATH = '/opt/local/include'
#  FFTW = 'fftw3'
#elif os.path.exists("/usr/local/lib/libfftw3.a") and os.path.exists("/usr/local/include/fftw3.f03"):
#  FFTW_LIB_PATH = '/usr/local/lib'
#  FFTW_INC_PATH = '/usr/local/include'
#  FFTW = 'fftw3'
#elif os.path.exists("../fftw/lib/libfftw3.a") and os.path.exists("../fftw/include/fftw3.f03"):
#  FFTW_LIB_PATH = '../fftw/lib'
#  FFTW_INC_PATH = '../fftw/include'
#  FFTW = 'fftw3'
#else :
#  fichier.write("#define _NOFFTW\n")

HDF5_INC_PATH = os.environ['HDF5INCPATH']
HDF5_LIB_PATH = os.environ['HDF5LIBPATH']

fichier.close()

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'hostname : ' + hostname
print 'platform : ' + platform

env = Environment( ENV = os.environ,
                   F90PATH = ['../memory','../precision','../assert','../mesh_types','../diagnostics',
                              '../utilities','../constants','../timer','../fftpack',FFTW_INC_PATH,HDF5_INC_PATH,'.'],
                   FORTRANMODDIRPREFIX= '-J', 
                   LIBPATH= ['.',FFTW_LIB_PATH, HDF5_LIB_PATH],
                   LIBS=['sll_fft','sll_memory','sll_precision','sll_assertion','sll_diagnostics',
                         'sll_misc','sll_constants','sll_timer','fftpack','sll_mesh_types',FFTW,'hdf5','hdf5_fortran','z'],
                   F90FLAGS = ['-g','-W','-Wall','-DTEST_TIME', 
                               '-DDEBUG','-DGFORTRAN','-D_FFTINFO',
                               '-ffree-line-length-none'])

env.Library('fftpack',          ["../fftpack/fftpack.f90","../fftpack/dfftpack.f"])
env.Library('sll_timer',        ["../timer/sll_timer.F90"])
env.Library('sll_memory',       ["../memory/sll_memory.F90"])
env.Library('sll_mesh_types',   ["../mesh_types/sll_mesh_types.F90","../mesh_types/geometry_functions.F90"])
env.Library('sll_precision',    ["../precision/sll_working_precision.F90"])
env.Library('sll_assertion',    ["../assert/sll_assert.F90"])
env.Library('sll_diagnostics', Glob("../diagnostics/sll_*.F90"))
env.Library('sll_misc',         ["../utilities/misc_utils.F90"])
env.Library('sll_constants',    ["../constants/numeric_constants.F90"])
env.Library('sll_fft',          ["./sll_fft.F90"])

env.Program('unit_test',        ["unit_test.F90"])
#env.Program('test',             ["test_c2c.F90"])
