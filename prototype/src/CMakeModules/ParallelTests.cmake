FIND_PROGRAM(POE_EXECUTABLE
  NAMES poe
  DOC "IBM tool to launch parallel jobs.")

IF (POE_EXECUTABLE)
  SET (POE_FOUND "YES")
ENDIF (POE_EXECUTABLE)

MARK_AS_ADVANCED( POE_FOUND POE_EXECUTABLE)

IF(POE_FOUND)

   SET(HOSTLIST "${CMAKE_BINARY_DIR}/host.list")
   SET(NPROCS 16)
   WHILE(NPROCS GREATER 0)
     FILE(APPEND ${HOSTLIST} "localhost\n")
     MATH(EXPR NPROCS "${NPROCS} - 1" ) 
   ENDWHILE( NPROCS GREATER 0)

   MACRO(SET_PROCS NPROCS)
      SET(MPIEXEC "poe")
      SET(MPIEXEC_NUMPROC_FLAG " ")
      SET(PROCS " ")
      SET(MPIEXEC_PREFLAGS " ")
      SET(MPIEXEC_POSTFLAGS "-procs")
      SET(ARGS "${NPROCS}")
   ENDMACRO(SET_PROCS)

ELSE(POE_FOUND)

   MACRO(SET_PROCS NPROCS)
      SET(PROCS "${NPROCS}")
   ENDMACRO(SET_PROCS)

ENDIF(POE_FOUND)

SET_PROCS(2)
ADD_TEST(NAME collective
         COMMAND
	${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_collective
	${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(collective PROPERTIES FAIL_REGULAR_EXPRESSION "NOT PASS")

SET_PROCS(8)
ADD_TEST(NAME remap_2d
	COMMAND
	${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_remap_2d
	${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(remap_2d PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

SET_PROCS(8)
ADD_TEST(NAME remap_3d
	COMMAND
	${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_remap_3d
	${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(remap_3d PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

SET_PROCS(16)
ADD_TEST(NAME remap_4d
	COMMAND
	${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_remap_4d
	${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(remap_4d PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

SET_PROCS(8)
ADD_TEST(NAME remap_6d
	COMMAND
	${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_remap_6d
	${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(remap_6d PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

SET_PROCS(16)
ADD_TEST(NAME poisson_3d_periodic_par
         COMMAND
	 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	 ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_poisson_3d_periodic_par
	 ${MPIEXEC_POSTFLAGS} ${ARGS})
SET_TESTS_PROPERTIES(poisson_3d_periodic_par 
                     PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

IF(NOT STDF95)

   SET_PROCS(16)
   ADD_TEST(NAME qns2d_with_finite_diff_par
         COMMAND
	 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	 ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_qns2d_with_finite_diff_par
	 ${MPIEXEC_POSTFLAGS} ${ARGS})
   SET_TESTS_PROPERTIES(qns2d_with_finite_diff_par 
                        PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

   SET_PROCS(16)
   ADD_TEST(NAME qns2d_angular_spectral_method_par
         COMMAND
	 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	 ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_qns2d_angular_spectral_method_par
	 ${MPIEXEC_POSTFLAGS} ${ARGS})
   SET_TESTS_PROPERTIES(qns2d_angular_spectral_method_par 
                        PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

ENDIF()

IF(HDF5_PARALLEL_ENABLED AND HDF5_ENABLE_PARALLEL)

   SET_PROCS(4)
   ADD_TEST(NAME low_level_file_io_parallel COMMAND 
            ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
            ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_io_parallel
            ${MPIEXEC_POSTFLAGS} ${ARGS})
   SET_TESTS_PROPERTIES(low_level_file_io_parallel 
                        PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")
   SET_PROCS(1)
   ADD_TEST(NAME poisson_periodic_cartesian_par_2d
            COMMAND
            ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_poisson_2d_per_cart_par
	    ${MPIEXEC_POSTFLAGS} ${ARGS})

   SET_PROCS(8)
   ADD_TEST(NAME test_vp4d_sim
            COMMAND
	    ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
	    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_vp4d_sim
	    ${MPIEXEC_POSTFLAGS} ${ARGS})
   SET_TESTS_PROPERTIES(test_vp4d_sim PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")

   IF(MUDPACK_ENABLED AND Fortran_COMPILER STREQUAL "GFORTRAN")
      SET_PROCS(4)
      ADD_TEST(NAME multigrid COMMAND 
      ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
      ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_multigrid
      ${MPIEXEC_POSTFLAGS} ${ARGS})
      SET(multigrid PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")
   ENDIF()

ENDIF()

IF(PASTIX_FOUND AND PTSCOTCH_FOUND AND MURGE_FOUND AND SCOTCH_FOUND)
  SET_PROCS(4)
  ADD_TEST(NAME pastix 
           COMMAND
           ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${PROCS} ${MPIEXEC_PREFLAGS}
           ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_pastix "1000 3" ${ARGS})
  SET(pastix PROPERTIES PASS_REGULAR_EXPRESSION "PASSED")
ENDIF()
