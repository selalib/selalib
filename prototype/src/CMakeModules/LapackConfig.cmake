
MESSAGE(STATUS "LAPACK:CMAKE_Fortran_COMPILER:${CMAKE_Fortran_COMPILER}")
SET(USE_MKL OFF CACHE BOOL "Using Intel Math Kernel Library")

IF(CMAKE_Fortran_COMPILER MATCHES "ifort")

   SET(BLA_VENDOR "Intel")

   IF($ENV{MKLROOT} MATCHES "composer")

      MESSAGE(STATUS "MKLROOT:$ENV{MKLROOT}")
      INCLUDE_DIRECTORIES($ENV{MKLROOT}/include)
      SET(LAPACK_LIBRARIES -L$ENV{MKLROOT}/lib -mkl=sequential)
      SET(LAPACK_FOUND TRUE)
      SET(USE_MKL ON)
      SET(BLAS_FOUND TRUE)
      SET(BLAS_LIBRARIES  " ")

   ELSEIF($ENV{HOSTNAME} MATCHES "hydra*") 
                                      
      INCLUDE_DIRECTORIES($ENV{MKLROOT}/include/intel64/lp64 $ENV{MKLROOT}/include)
      SET(BLAS_LIBRARIES "")
      SET(LAPACK_LIBRARIES "-Wl,--start-group  $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lm")
      SET(LAPACK_FOUND TRUE)
      SET(BLAS_FOUND TRUE)
      SET(USE_MKL ON)

   ELSEIF($ENV{HOSTNAME} MATCHES "hpc-f0*")

      SET(MKLPATH  "/opt/intel/Compiler/11.1/072/mkl/lib/em64t")
      SET(LAPACK_LIBRARIES -L${MKLPATH} -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -openmp )
      SET(LAPACK_FOUND TRUE)
      SET(BLAS_FOUND TRUE)
      SET(BLAS_LIBRARIES  " ")
      SET(USE_MKL ON)

   ENDIF()

ELSE()

   IF(APPLE)
      SET(BLA_VENDOR "Apple")
   ENDIF(APPLE)
   FIND_PACKAGE(BLAS   QUIET)
   FIND_PACKAGE(LAPACK QUIET)

ENDIF()

IF(LAPACK_FOUND AND BLAS_FOUND)

  MESSAGE(STATUS "BLAS_LIBRARIES:${BLAS_LIBRARIES}")
  MESSAGE(STATUS "LAPACK_LIBRARIES:${LAPACK_LIBRARIES}")

ELSE(LAPACK_FOUND AND BLAS_FOUND)

  MESSAGE(STATUS "Failed to link LAPACK, BLAS, ATLAS libraries with environments")
  MESSAGE(STATUS "Going to search LAPACK standard paths.")
  FIND_LIBRARY(LAPACK_LIBRARIES NAMES lapack HINTS /opt/local /usr/local PATH_SUFFIXES lib)
  FIND_LIBRARY(BLAS_LIBRARIES NAMES blas HINTS /opt/local /usr/local PATH_SUFFIXES lib)

  IF(LAPACK_LIBRARIES AND BLAS_LIBRARIES)

    MESSAGE(STATUS "LAPACK_LIBRARIES:${LAPACK_LIBRARIES}")
    MESSAGE(STATUS "BLAS_LIBRARIES:${BLAS_LIBRARIES}")
    SET(LAPACK_FOUND TRUE)
    SET(BLAS_FOUND TRUE)

  ELSE()

     MESSAGE(SEND_ERROR "LAPACK NOT FOUND")
     SET(LAPACK_LIBRARIES " ")
     SET(BLAS_LIBRARIES " ")
 
  ENDIF(LAPACK_LIBRARIES AND BLAS_LIBRARIES)

ENDIF(LAPACK_FOUND AND BLAS_FOUND)

MARK_AS_ADVANCED( LAPACK_LIBRARIES
                  BLAS_LIBRARIES    )

SET(LINK_LIBRARIES ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
