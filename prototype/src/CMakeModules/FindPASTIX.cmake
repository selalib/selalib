# Pastix lib requires linking to a blas library.
# It is up to the user of this module to find a BLAS and link to it.
# Pastix requires SCOTCH or METIS (partitioning and reordering tools) as well

IF(DEFINED ENV{PASTIX_ROOT})
   SET(PASTIX_ROOT $ENV{PASTIX_ROOT} CACHE PATH "pastix location")
ELSE()
   SET(PASTIX_ROOT /usr/local CACHE PATH "pastix location")
ENDIF()

FIND_PATH(PASTIX_INCLUDE_DIRS
	    NAMES pastix_fortran.h
	    HINTS ${PASTIX_ROOT}
	    PATH_SUFFIXES include Include INCLUDE
	    DOC "PATH TO pastix_fortran.h")

FIND_LIBRARY(PASTIX_LIBRARY NAMES pastix
		 HINTS ${PASTIX_ROOT}
		 PATH_SUFFIXES lib Lib LIB
		 DOC "PATH TO libpastix.a")

FIND_LIBRARY(PASTIX_MATRIX_DRIVER_LIBRARY NAMES matrix_driver
		 HINTS ${PASTIX_ROOT}
		 PATH_SUFFIXES lib Lib LIB
		 DOC "PATH TO libmatrix_driver.a")

FIND_LIBRARY(HWLOC_LIBRARY NAMES hwloc
		 HINTS ${PASTIX_ROOT} /usr/local /opt/local
		 PATH_SUFFIXES lib Lib LIB lib64
		 DOC "PATH TO hwloc library")

SET(PASTIX_LIBRARIES ${PASTIX_LIBRARY};${PASTIX_MATRIX_DRIVER_LIBRARY};${HWLOC_LIBRARY})

IF (PASTIX_INCLUDE_DIRS AND PASTIX_LIBRARIES)

  SET(PASTIX_FOUND YES)
  MESSAGE(STATUS "PASTIX_INCLUDE_DIRS:${PASTIX_INCLUDE_DIRS}")
  MESSAGE(STATUS "PASTIX_LIBRARIES:${PASTIX_LIBRARIES}")

ENDIF(PASTIX_INCLUDE_DIRS AND PASTIX_LIBRARIES)

FIND_PATH(MURGE_INCLUDE_DIRS
	    NAMES murge.inc
	    HINTS ${PASTIX_ROOT}
	    PATH_SUFFIXES include Include INCLUDE
	    DOC "PATH TO murge.inc")

FIND_LIBRARY(MURGE_LIBRARIES
		 NAMES pastix_murge 
		 HINTS ${PASTIX_ROOT}
		 PATH_SUFFIXES lib Lib LIB
		 DOC "PATH TO libpastix_murge.a")

IF (MURGE_INCLUDE_DIRS AND MURGE_LIBRARIES)

  SET(MURGE_FOUND YES)

ENDIF(MURGE_INCLUDE_DIRS AND MURGE_LIBRARIES)

MARK_AS_ADVANCED(PASTIX_INCLUDE_DIRS
                 PASTIX_LIBRARY
                 PASTIX_MATRIX_DRIVER_LIBRARY
                 PASTIX_LIBRARIES
                 HWLOC_LIBRARY
                 MURGE_INCLUDE_DIRS
                 MURGE_LIBRARIES)
                 
