# SCons file for the unit test of the mesh type
import os
import socket
import distutils.util

platform = distutils.util.get_platform()
hostname = socket.gethostname() 

print 'hostname : ' + hostname
print 'platform : ' + platform

env = Environment( ENV=os.environ,
                   F90PATH = ['../memory',
                              '../precision',
                              '../assert',
                              '../utilities',
                              '../constants',
                              '../splines',
                              '../diagnostics'], 
                   LIBPATH= ['.'],
                   LIBS=['sll_memory',
                         'sll_precision',
                         'sll_assert',
                         'sll_utilities', 
                         'sll_constants',
                         'sll_splines',
                         'sll_diagnostics'],
                   F90FLAGS = ['-g','-cpp','-W','-Wall','-std=f2003',
                               '-ffree-line-length-none'])

env.Append(CPPDEFINES=['DEBUG','GFORTRAN'])

env.Append(F90PATH=[os.environ['HDF5INCPATH']])
env.Append(LIBPATH=[os.environ['HDF5LIBPATH']])
env.Append(LIBS=['hdf5_fortran','hdf5','z'])

env.Library('sll_memory',["../memory/sll_memory.F90"])
env.Library('sll_precision', ["../precision/sll_working_precision.F90"])
env.Library('sll_assert', ["../assert/sll_assert.F90"])
env.Library('sll_utilities',["../utilities/misc_utils.F90"])
env.Library('sll_constants', ["../constants/numeric_constants.F90"])
env.Library('sll_splines', ["../splines/sll_splines.F90"])
env.Library('sll_diagnostics', Glob("../diagnostics/sll_*.F90"))
env.Program('sll_mesh_types', ["sll_mesh_types.F90","unit_test.F90","geometry_functions.F90"])
#env.Program('unit_test',["sll_mesh_experimental.F90", "geometry_functions.F90",
#                         "unit_test_experimental.F90"])
#env.Program('unit_test_experimental',["unit_test_experimental.F90",
#                                      "sll_mesh_experimental.F90",
#                                      "geometry_functions.F90"])
