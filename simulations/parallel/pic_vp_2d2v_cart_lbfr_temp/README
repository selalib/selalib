# Summary of commands for BSL-LT-PIC compilation
# ==============================================
# 
# MCP and ALH
# 
#+STARTUP: showeverything
# [[elisp:(alh-set-keywords)]] ([[file:~/.emacs::alh-set-keywords]])
# emacs-keywords authors="MCP and ALH" brief="Summary of commands for BSL-LT-PIC compilation" org start=26/10/15

# <<<<pic_vp_2d2v_cart_lbfr_temp>>>> [[file:.]] uses [[[selalib:src/particle_methods/pic_remapped/bsl_lt_pic/CMakeLists.txt::BSL-LT-PIC_Library]]]

* [[file:.][Files]]
* Doxygen [[elisp:(compile "cd ${SELALIB}/build && make doc")][build]], [[selalib:doc/build/html/doxygen/html/index.html][index]]
* Configuring
** [[elisp:(compile "sudo apt-get install -y libopenmpi-dev libfftw3-dev liblapack-dev libhdf5-mpi-dev binutils linux-tools")][Extra packages]] (binutils required for [[gprof]], linux-tools for [[perf]])
** Configuration
   Mode [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=FALSE -DOPENMP_ENABLED=OFF ../../selalib" t)][quiet]], [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -DOPENMP_ENABLED=OFF ../../selalib" t)][verbose]], [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -DOPENMP_ENABLED=OFF -DCMAKE_Fortran_FLAGS='-ggdb' ..")][optimized]] ('-g' required for [[callgrind]] profiling, '-ggdb' for [[perf]] profiling).  The current configuration is cached in
   [[selalib:build/CMakeCache.txt]].  Some configuration options are required for [[file:../CMakeLists.txt]] to build parallel tests. [[file:~/selalib/CMakeLists.txt::OPENMP_ENABLED][OPENMP_ENABLED]]
   is forced to OFF until further speed tests.  Cleaning and recreating the build directory is done with [[shell:rm -rf ~/selalib/build]] and
   [[shell:mkdir -p ~/selalib/build]].  Reinitialising cmake configuration choices is done with [[elisp:(compile "cd ${SELALIB}/build && make clear")][clear]], [[elisp:(compile "cd ${SELALIB}/build && make clean")][clean]] or [[shell:rm ${SELALIB}/build/CMakeCache.txt][deleting]] [[selalib:build/CMakeCache.txt][CMakeCache.txt]].
* Compiling: [[elisp:(compile "cd ${SELALIB}/build && make")][sequential]], [[elisp:(compile "cd ${SELALIB}/build && make -j $NCPU")][parallel]]
* Running
** Parameters file file:params_lt_pic_4d.nml or file:params_simple_pic_4d.nml

   - copy the files in the run directory (launch from build, src or usr directory) :
     cp ../src/simulations/parallel/pic_vp_2d2v_cart_remapped/*.nml ../usr/simulations/sim_parallel/pic_vp_2d2v_cart_remapped/

** Create [[shell:mkdir -p run.out][run.out]] directory then run [[elisp:(compile "cd run.out && ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_lt_pic_4d.nml")][lt_pic]] or [[elisp:(compile "cd run.out && ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped params_simple_pic_4d.nml")][simple_pic]] (or via [[elisp:(compile "cd ${SELALIB}/build && ctest -R pic_vp_2d2v_cart_remapped")][ctest]])
** Plots with [[man:gnuplot][gnuplot]]
*** [[shell:cd run.out && gnuplot rho_init_standPUSH.gnu --persist][rho_init_standPUSH]] (script [[file:run.out/rho_init_standPUSH.gnu][rho_init_standPUSH.gnu]] generated by [[file:sll_m_sim_pic_vp_2d2v_cart_remapped.F90::rho_init_standPUSH][rho_init_standPUSH]])
*** [[shell:cd run.out && gnuplot Ex.gnu --persist][Ex]] and [[shell:cd run.out && gnuplot Ey.gnu --persist][Ey]] (scripts [[file:run.out/Ex.gnu][Ex.gnu]] and [[file:run.out/Ey.gnu][Ey.gnu]] generated by [[file:sll_m_sim_pic_vp_2d2v_cart_remapped.F90::Ex_Ey_output][Ex_Ey_output]])
*** [[shell:cd run.out && gnuplot f_slice.gnu --persist][f_slice]] (script [[file:run.out/f_slice.gnu][f_slice.gnu]] generated by [[file:sll_m_sim_pic_vp_2d2v_cart_remapped.F90::f_slice][f_slice]])
*** log(E)
**** [[shell:gnuplot -e "plot 'run.out/logE_standPush.dat' u 0:2 w l, '' u 0:3 w l" --persist][single plot]] (data generated by [[file:sll_m_sim_pic_vp_2d2v_cart_remapped.F90::logE_standPush][logE_standPush]])
**** comparison between lt_pic and simple_pic
     [[shell:mkdir -p lt_pic.out]]
     [[elisp:(compile "cd lt_pic.out && ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_lt_pic_4d.nml")]]
     [[shell:mkdir -p simple_pic.out]]
     [[elisp:(compile "cd simple_pic.out && ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_simple_pic_4d.nml")]]
     [[shell:gnuplot -e "plot 'lt_pic.out/logE_standPush.dat' w l,'simple_pic.out/logE_standPush.dat' w l" --persist]]
     AAA_ALH_TODO
*** Autres graphes
-- pour representer les points reconstruits ou bien les points de f_target dont la vitesse est donnee

vx = 3
vy = 0

splot 'target_values_test_init4D.dat' u 1:2:(abs(($3)-vx)<0.01 && abs(($4)-vy)<0.01 ? $6 : 1/0) w p, '' u 1:2:(abs(($3)-vx)<0.01 && abs(($4)-vy)<0.01 ? $5 : 1/0) w p lc "blue"

* <<Debugging>> with [[elisp:(cd run.out && gdb "gdb -i=mi --args $SELALIB/build/bin/pic_vp_2d2v_cart_remapped/sim_pic_vp_2d2v_cart_remapped ../params_debug.nml")][gdb]]
* <<Profiling>>
** with [[http://valgrind.org/docs/manual/cl-manual.html][callgrind]]
    [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -DOPENMP_ENABLED=OFF -DCMAKE_Fortran_FLAGS='-g' ..")][configure]] (-g is required), [[elisp:(compile "cd ${SELALIB}/build && make -j $NCPU")][compile]], Create [[shell:mkdir -p callgrind.out][callgrind.out]] directory, build _small_ test case in [[file:callgrind.out/params.nml]] (run time
    is 20-100x slower), then [[elisp:(compile "cd callgrind.out && valgrind --tool=callgrind ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped params.nml")][run]].
** with <<perf>> from the "linux-tools" package under Debian (more on perf profiling: [[https://perf.wiki.kernel.org/index.php/Tutorial]])
*** [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Release -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -DOPENMP_ENABLED=OFF -DCMAKE_Fortran_FLAGS='-ggdb' ../../selalib")][configure]] (-ggdb option is required to see source lines in the perf annotate output)
*** [[elisp:(compile "cd ${SELALIB}/build && make -j $NCPU")][compile]]
*** run
**** basic

     - plain run for timing reference (instrumented runs should not be more than 5% slower than this)

       [[elisp:(compile "$SELALIB/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_perf.nml | tee perf_ref_`date +%y%m%d%H%M`.txt")]]

     - basic stats ([[man:perf-stat]])

       [[elisp:(compile "perf stat -d --log-fd 1 ../sim_pic_vp_2d2v_cart_remapped ../params_perf.nml | tee perf_stat_`date +%y%m%d%H%M`.txt")]]

     - other valuable counters that may be worth testing

     perf stat -B -e cache-references,cache-misses,cycles,instructions,branches,faults,migrations ../sim_pic_vp_2d2v_cart_remapped ../params_ltpic_pic_4d.nml

**** instrumented

      Statistics are recorded in binary form in run.out/perf.data ([[man:perf-record]]). The sampling value of 100000 is chosen
      according to [[http://sandsoftwaresound.net/perf/perf-tut-profile-hw-events/]]. "-o" is required to prevent perf from
      sending binary data into the output pipe

      - cpu-cycles

        [[elisp:(compile "STAMP=`date +%y%m%d%H%M` && perf record -e cpu-cycles -c 100000 -o perf.data $SELALIB/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_perf.nml | tee perf_cpu_$STAMP.txt && cp perf.data perf_cpu_$STAMP.data")]]

      - stalled-cycles-frontend

        [[elisp:(compile "STAMP=`date +%y%m%d%H%M` && perf record -e stalled-cycles-frontend -c 100000 -o perf.data $SELALIB/build/bin/sim_pic_vp_2d2v_cart_remapped ../params_perf.nml | tee perf_stall_$STAMP.txt && cp perf.data perf_stall_$STAMP.data")]]

*** report
**** whole code with file:perf_report

     [[elisp:(compile "./perf_report")]]

**** annotating source code with file:perf_annotate
***** [[selalib:src/pic_utilities/lt_pic_4d_utilities.F90::sll_lt_pic_4d_write_f_on_grid_or_deposit][sll_lt_pic_4d_write_f_on_grid_or_deposit]]

       [[elisp:(compile "./perf_annotate __sll_lt_pic_4d_utilities_MOD_sll_lt_pic_4d_write_f_on_grid_or_deposit")]]

***** [[selalib:src/pic_utilities/sll_representation_conversion.F90::cell_offset_to_global_extended][cell_offset_to_global_extended]]

       [[elisp:(compile "./perf_annotate __sll_representation_conversion_module_MOD_cell_offset_to_global_extended")]]
       
** with <<gprof>>

   - configure

     [[elisp:(compile "cd ${SELALIB}/build && cmake -DCMAKE_BUILD_TYPE=Debug -DHDF5_PARALLEL_ENABLED=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -DOPENMP_ENABLED=OFF -DCMAKE_Fortran_FLAGS='-pg -fprofile-arcs -ftest-coverage' ../../selalib")]]

   - run

     [[elisp:(compile "pushd ${SELALIB}/build && make -j $NCPU && popd && ${SELALIB}/build/bin/sim_pic_vp_2d2v_cart_remapped params_ltpic_pic_4d.nml|tee output.txt")]]

   - Generate profiling reports with [[man:gprof]] (See also [[http://www.thegeekstuff.com/2012/08/gprof-tutorial/]])

     [[elisp:(compile "gprof ../sim_pic_vp_2d2v_cart_remapped gmon.out > func_profile.txt")]]

     [[elisp:(compile "gprof -l ../sim_pic_vp_2d2v_cart_remapped gmon.out > line_profile.txt")]]

* <<File_info>>

# Local Variables:
# mode:org
# mode:visual-line
# ispell-local-dictionary:"british"
# coding:utf-8
# eval:(flyspell-prog-mode)
# eval:(outline-minor-mode)
# End:
# LocalWords: emacs
